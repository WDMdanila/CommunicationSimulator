# All options: https://github.com/uncrustify/uncrustify/blob/master/src/options.h
# iarf_e         = Ignore / Add / Remove / Force
# line_end_e     = Line End: LF("\n") / CRLF("\r\n") / CR("\r") / AUTO
# token_pos_e    = Ignore / Break / Force / Lead / Trail / Join / Lead_Break / Lead_Force / Trail_Break / Trail_Force
# boolean        = True / False



# ================================== General ==================================
newlines                                     = auto
utf8_bom                                     = remove
string_replace_tab_chars                     = true
tok_split_gte                                = false
input_tab_size                               = 4
output_tab_size                              = 4
string_escape_char                           = 92
code_width                                   = 130
indent_columns                               = 4
indent_continue                              = 4
indent_with_tabs                             = 0
indent_align_assign                          = false



# ================================== SPACING ==================================
# ==== Classes, Structs, Unions, Enums, Namespaces ====
sp_enum_brace                                = add
sp_after_dc                                  = remove
sp_before_dc                                 = remove
sp_inside_braces_struct                      = force
sp_inside_braces_enum                        = force
sp_word_brace_ns                             = force
sp_enum_assign                               = force


# ======== Functions ========
sp_func_call_user_paren_paren                = remove
sp_func_call_paren                           = remove
sp_after_cast                                = remove     # "(int) a" vs "(int)a"
sp_cpp_lambda_assign                         = remove     # Add or remove space around '=' in C++11 lambda capture specifications.
sp_func_def_paren                            = remove
sp_func_proto_paren                          = remove
sp_inside_newop_paren                        = remove     # Add or remove space inside parentheses of the new operator as in 'new(foo) BAR'.
sp_inside_fparen                             = remove     # Add or remove space inside function '(' and ')'.
sp_cpp_lambda_square_paren                   = add        # '[] <here> (int x){ ... }'
sp_cpp_lambda_square_brace                   = add        # '[] <here> { ... }'
sp_assign_default                            = force
sp_after_operator                            = force
sp_trailing_return                           = force
sp_type_func                                 = force
sp_return                                    = force
sp_return_paren                              = force
sp_return_brace                              = force
sp_attribute_paren                           = force


# ======== Macros ========
sp_macro                                     = force


# ======== Booleans ========
sp_not                                       = remove
sp_bool                                      = force
sp_compare                                   = force


# ======== () / {} / [] ========
sp_inside_paren                              = remove
sp_inside_braces                             = remove
sp_after_sparen                              = force        # "if () {" vs "if (){"
sp_paren_qualifier                           = force
sp_paren_noexcept                            = force
sp_word_brace_init_lst                       = force       #Add or remove space between a variable and '{' for C++ uniform initialization.
sp_inside_type_brace_init_lst                = remove
sp_brace_brace                               = remove       # Add or remove space between nested braces, i.e. '{{' vs. '{ {'.


# ======== Pointers / References ========
sp_before_ptr_star                           = remove
sp_ptr_star_func_var                         = remove
sp_before_ptr_star_func                      = remove
sp_before_ptr_star_trailing                  = remove
sp_before_byref                              = remove
sp_before_unnamed_byref                      = remove
sp_addr                                      = remove
sp_member                                    = remove
sp_after_ptr_star                            = force
sp_after_byref                               = force
sp_after_new                                 = force


# ======== Types / Templates ========
sp_after_decltype                            = remove
sp_after_type                                = force
sp_after_noexcept                            = force


# ======== Control statements ========
sp_before_semi                               = remove
sp_type_colon                                = remove
sp_cond_question_before                      = remove
sp_after_semi                                = add         # Add or remove space after ';', except when followed by a comment.
sp_between_semi_for_empty                    = force
sp_after_semi_for_empty                      = force
sp_before_sparen                             = force
sp_sparen_brace                              = force
sp_else_brace                                = force
sp_brace_else                                = force
sp_catch_brace                               = force
sp_brace_catch                               = force
sp_try_brace                                 = force
sp_cond_colon                                = force
sp_cond_question_after                       = force
sp_cond_ternary_short                        = force
sp_case_label                                = force
sp_after_for_colon                           = force


# ======== Commas, Elipsis, Semicolons, <>, +, -, = Etc.. ========
sp_after_semi                                = remove
sp_before_case_colon                         = remove
sp_before_angle                              = remove
sp_angle_paren                               = remove
sp_incdec                                    = remove
sp_angle_shift                               = remove
sp_after_comma                               = force
sp_after_ellipsis                            = force
sp_after_class_colon                         = force
sp_after_constr_colon                        = force
sp_template_angle                            = force
sp_angle_word                                = force
sp_ellipsis_parameter_pack                   = force
sp_arith                                     = force
sp_assign                                    = force
sp_sign                                      = force
sp_permit_cpp11_shift                        = true


# ======== Comments ========
sp_cmt_cpp_start                             = force



# ================================== INDENTATION ==================================
indent_class                                 = true
indent_align_string                          = true
indent_extern                                = true
indent_constr_colon                          = true
indent_else_if                               = true
indent_ignore_case_brace                     = true
indent_inside_ternary_operator               = true
indent_col1_multi_string_literal             = true
indent_cpp_lambda_only_once                  = true    # The indentation can be: false - after the assignment, at the '[' character, true - at the beginning of the lambda body
indent_cpp_lambda_body                       = true   # Whether to indent the body of a C++11 lambda.
indent_func_def_force_col1                   = false   # Whether to force indentation of function definitions to start in column 1.
indent_ignore_first_continue                 = false
indent_single_newlines                       = false
indent_namespace                             = true
indent_braces                                = false
indent_ignore_before_constr_colon            = false
indent_var_def_cont                          = false
indent_func_call_param                       = false
indent_func_def_param                        = false
indent_member_single                         = false
indent_switch_break_with_case                = false
indent_func_ctor_var_param                   = false
indent_shift                                 = 0
indent_switch_case                           = 0
indent_member                                = 1
indent_ternary_operator                      = 1
indent_switch_body                           = 1
indent_ctor_init_leading                     = 2



# ================================== NEW LINES ==================================
nl_start_of_file                             = remove
nl_assign_brace                              = remove
nl_tsquare_brace                             = remove
nl_fcall_brace                               = remove
nl_enum_brace                                = remove
nl_enum_class                                = remove
nl_struct_brace                              = remove   # Add or remove newline between 'struct and '{'.
nl_union_brace                               = remove
nl_if_brace                                  = remove
nl_brace_else                                = remove
nl_elseif_brace                              = remove
nl_else_brace                                = remove
nl_else_if                                   = remove
nl_try_brace                                 = remove
nl_for_brace                                 = remove
nl_catch_brace                               = remove
nl_brace_catch                               = remove
nl_while_brace                               = remove
nl_do_brace                                  = remove
nl_brace_while                               = remove
nl_switch_brace                              = remove
nl_case_colon_brace                          = remove
nl_namespace_brace                           = remove
nl_class_brace                               = remove
nl_func_type_name                            = remove    # Add or remove newline between return type and function name in a function definition.
nl_func_type_name_class                      = remove    # Add or remove newline between return type and function name inside a class definition.
nl_before_opening_brace_func_class_def       = remove    # Add or remove newline before '{' opening brace
nl_func_proto_type_name                      = remove
nl_fdef_brace                                = remove
nl_cpp_ldef_brace                            = remove
nl_type_brace_init_lst_open                  = remove
nl_type_brace_init_lst_close                 = remove
nl_brace_struct_var                          = remove
nl_class_colon                               = remove
nl_after_if                                  = remove
nl_after_for                                 = remove
nl_after_while                               = remove
nl_after_do                                  = remove
nl_func_paren                                = remove    #Add or remove newline between a function name and the opening '(' in the declaration.
nl_func_call_paren                           = remove    #Add or remove newline between a function name and the opening '(' in the call.
nl_end_of_file                               = force
nl_template_class                            = force
nl_template_func                             = force
nl_constr_init_args                          = force    # Add or remove newline after each ',' in the constructor member initialization.
nl_constr_colon                              = force
nl_before_if                                 = force
nl_before_for                                = force
nl_before_do                                 = force
nl_before_while                              = force
nl_collapse_empty_body                       = true     # Whether to collapse empty blocks between '{' and '}' except for functions.
nl_assign_leave_one_liners                   = true     # Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.
nl_enum_leave_one_liners                     = true     # Don't split one-line enums, as in 'enum foo { BAR = 15 };'
nl_getset_leave_one_liners                   = true     # Don't split one-line get or set functions.
#nl_func_leave_one_liners                    = true     # Don't split one-line function definitions, as in 'int foo() { return 0; }'.
nl_func_call_start_multi_line                = true     # Whether to add newline after ( in a function call if ( and ) are in different lines.
nl_func_call_args_multi_line                 = true     # Whether to add newline after each , in a function call if ( and ) are in different lines.
nl_cpp_lambda_leave_one_liners               = true
nl_before_case                               = true
nl_after_case                                = true
nl_after_semicolon                           = true
nl_after_brace_open                          = true
nl_after_vbrace_open                         = true
nl_after_vbrace_open_empty                   = true
nl_after_brace_close                         = true
nl_after_vbrace_close                        = true
nl_squeeze_paren_close                       = true     # Whether to alter newlines between consecutive parenthesis closes. The number of closing parentheses in a line will depend on respective open parenthesis lines.
nl_split_while_one_liner                     = true
nl_namespace_two_to_one_liner                = true
nl_create_func_def_one_liner                 = true
nl_split_if_one_liner                        = true
nl_split_for_one_liner                       = true
disable_processing_nl_cont                   = true     # Disable formatting of NL_CONT ('\\n') ended lines (e.g. multi-line macros).
nl_class_leave_one_liners                    = true     # Don't split one-line braced statements inside a 'class xx { }' body.
#nl_collapse_empty_body_functions            = false
nl_if_leave_one_liners                       = false
nl_while_leave_one_liners                    = false
nl_do_leave_one_liners                       = false
nl_for_leave_one_liners                      = false
nl_template_start                            = false
nl_template_args                             = false
nl_before_brace_open                         = false
nl_after_return                              = false
nl_inside_empty_func                         = 1
nl_end_of_file_min                           = 1



# ================================== BLANK LINES ===============================
nl_class_leave_one_liner_groups              = false
eat_blanks_after_open_brace                  = false
eat_blanks_before_close_brace                = true
nl_remove_extra_newlines                     = 0
nl_inside_empty_func                         = 1
nl_before_func_body_proto                    = 1
nl_after_func_proto                          = 1
nl_after_func_class_proto                    = 1
nl_after_func_body_one_liner                 = 1
nl_typedef_blk_start                         = 1
nl_max                                       = 2
#nl_after_func_proto_group                   = 2     #this breaks functions with [[attribute]] not sure if intentional or not
nl_after_func_class_proto_group              = 2
nl_after_func_body                           = 2
nl_typedef_blk_end                           = 2
#nl_var_def_blk_end_func_top                 = 2
nl_after_struct                              = 2
nl_after_class                               = 2



# ================================== POSITIONING ===============================
pos_assign                                   = trail
pos_class_comma                              = trail_break
pos_class_colon                              = trail_force
pos_constr_comma                             = trail_force
pos_shift                                    = lead
pos_constr_colon                             = lead_break



# ================================== LINE SPLITTING ===============================
ls_for_split_full                            = true
ls_func_split_full                           = true    # Whether to fully split long function prototypes/calls at commas.
ls_code_width                                = false   # Whether to split lines as close to code_width as possible and ignore some groupings.



# ================================== CODE ALIGNMENT ===============================
align_number_right                           = true
align_single_line_brace                      = true
align_left_shift                             = true
align_eigen_comma_init                       = true
align_keep_tabs                              = false
align_with_tabs                              = false
align_keep_extra_space                       = false
align_func_params                            = false
align_same_func_call_params                  = false
align_assign_on_multi_var_defs               = false
align_typedef_func                           = 1
align_assign_span                            = 0      # The span for aligning on '=' in assignments. (0 : 5000, 0-don't align)
align_assign_decl_func                       = 2      # How to align "T function() = default|deleted". (0 : 2,  2-don't align)



# ================================== CODE MODIFICATION ===============================
mod_paren_on_return                          = remove
#mod_paren_on_throw                          = remove
#mod_int_short                               = remove
#mod_int_long                                = remove
#mod_int_signed                              = remove
#mod_int_unsigned                            = remove
mod_full_brace_do                            = force
mod_full_brace_for                           = force
mod_full_brace_if                            = force
mod_full_brace_while                         = force
#mod_short_int                               = force
#mod_long_int                                = force
#mod_signed_int                              = force
#mod_unsigned_int                            = force
mod_full_paren_if_bool                       = true
#mod_full_paren_assign_bool                  = true    # currently breaks some lambdas ¯\_(ツ)_/¯
mod_full_paren_return_bool                   = true
mod_remove_extra_semicolon                   = true
mod_remove_duplicate_include                 = true
mod_move_case_break                          = true
mod_move_case_return                         = true
mod_remove_empty_return                      = true
mod_enum_last_comma                          = true
#mod_int_prefer_int_on_left                  = false
#mod_infinite_loop                           = 2
#mod_full_brace_if_chain                     = 2
mod_add_long_namespace_closebrace_comment    = 1



# ================================== SORTING ===============================
mod_sort_case_sensitive                      = false
mod_sort_include                             = true
mod_sort_incl_import_grouping_enabled        = false

include_category_0 = '((<|")(gtest|gmock).+)'          # The regex for include category with priority 0.
include_category_1 = '((<|")(.+)(h|hpp)).'             # The regex for include category with priority 1.
include_category_2 = "<\w+>"                           # The regex for include category with priority 2.

# ================================== MACRO =================================
disable_processing_nl_cont = false
